// polymorphism in oop means "many form" the ability of one function, operator, or object to behave differently
//based on the contaxt.
//types 
//compile time polymorphism(function overloading & operator overloading)
//run time polymorphism(function overriding & virtual overloading)

//funtion overloading

class Print{
    public:
    void display(int x){
        cout<<x;
    }
    void display(double y){
        cout<<y;
    }
};
int main(){
    print obj;
    obj.display(10);
    obj.display(12.5);
}


class Print{
    public:
    void display(int x){
        cout<<x;
    }
    void display(int s, int y){
        cout<<s<<y;
    }
};
int main(){
    print obj;
    obj.display(10);
    obj.display(15, 20);
}

//method overriding

class A{
    public:
    void show(){
        cout<<"I am base";
    }
};
class B : public A{
    public:
    void show(){
        cout<<"I am derived";
    }
};
int main(){
    B b1, b2
    b1.show(); //show from derived class run this is overriding 
    b2.A::show() //show from base class run
}

//virtual function

class Base{
    public:
    virtual void show(){
        cout<<"show base";
    }
};
class Derived : public Base{
    public:
    void show(){
        cout<<"Derived show";
    }
};
int main(){
    Base ptr;
    Derived d;
    ptr = &d;
    ptr ->show(); //it show from derived class if virtual not written then show from base class 
}